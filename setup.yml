---
- name: Setup Zero Networks
  ignore_unreachable: true
  hosts: all
  tasks:
    - name: Print playbook version
      debug:
        msg: Playbook version 1.7.2
      run_once: true

    - name: Run hostnamectl
      register: hostnamectl
      shell:
        cmd: "hostnamectl"

    - debug:
        var: hostnamectl.stdout_lines

    - name: Create Zero Networks user
      user:
        name: "{{ zn_user }}"
        password: "{{ zn_user_password | password_hash('sha512') }}"
        password_lock: yes
        state: present
        createhome: yes

    - name: Update apt cache
      when: ansible_pkg_mgr == "apt"
      ignore_errors: true
      apt:
        update_cache: yes

    - name: Update yum cache
      when: ansible_pkg_mgr == "yum"
      ignore_errors: true
      yum:
        update_cache: yes

    - name: Update dnf cache
      when: ansible_pkg_mgr == "dnf"
      ignore_errors: true
      dnf:
        update_cache: yes

    - name: Check python version
      shell:
        cmd: "(which python3 && echo 3) || (which python2 && echo 2) || (which python && ((python --version | grep -q ' 2.' && echo 2) || (python --version | grep -q ' 3.' && echo 3)))"
      register: python_query

    - name: Set python variables
      set_fact:
        python_version: "{{ python_query.stdout_lines[1] }}"
        python_venv: "/home/{{ zn_user }}/.zn-internal/venv{{ python_query.stdout_lines[1] }}"
        python_exec_name: "{{ 'python3' if python_query.stdout_lines[1] == '3' else 'python' }}"
        pip_exec_name: "{{ 'pip3' if python_query.stdout_lines[1] == '3' else 'pip' }}"

    - debug:
        msg: "python_query.stdout_lines:{{ python_query.stdout_lines }} python_version:{{ python_version }} python_venv:{{ python_venv }} python_exec_name:{{ python_exec_name }} pip_exec_name:{{ pip_exec_name }}"

    - name: Install extra packages forenterprise Linux
      when: ansible_pkg_mgr == "yum" or ansible_pkg_mgr == "dnf"
      ignore_errors: true
      package:
        name: "epel-release"
        state: present

    - name: Install gcc (required for python-iptables)
      package:
        name: gcc
        state: present

    - name: Install rsyslog package
      package:
        name: rsyslog
        state: present

    - name: Install logrotate package
      package:
        name: logrotate
        state: present

    - name: Try install iptables-legacy-libs
      ignore_errors: true
      package:
        name: iptables-legacy-libs
        state: present

    - name: Install pip
      package:
        name: "{{ python_exec_name }}-pip"
        state: present

    - name: Install python devel - yum / dnf
      when: ansible_pkg_mgr == "yum" or ansible_pkg_mgr == "dnf"
      package:
        name: "{{ python_exec_name }}-devel"
        state: present

    - name: Install virtualenv - using apt
      when: ansible_pkg_mgr == "apt"
      package:
        name: "{{ python_exec_name }}-venv"
        state: present

    - name: Install virtualenv - using pip
      when: ansible_pkg_mgr == "yum" or ansible_pkg_mgr == "dnf"
      pip:
        name: virtualenv
        executable: "{{ pip_exec_name }}"

    - name: Install virtualenv
      pip:
        name: virtualenv
        executable: "{{ pip_exec_name }}"

    - name: Create python virtualenv - python 3
      when: "{{ python_version }} == 3"
      pip:
        name: pip
        virtualenv: "{{ python_venv }}"
        virtualenv_command: "{{ python_exec_name }} -m venv"

    - name: Create python virtualenv - python 2
      when: "{{ python_version }} == 2"
      pip:
        name: pip
        virtualenv: "{{ python_venv }}"
        virtualenv_command: "{{ python_exec_name }} -m virtualenv"

    - name: Upgrade virtualenv pip
      shell:
        cmd: "{{ python_venv }}/bin/pip install -U pip"

    - name: Install python dependencies
      pip:
        name: wheel, pytz, watchdog, python-iptables
        virtualenv: "{{ python_venv }}"

    - name: Install python2 additional dependencies
      when: python_version == "2"
      pip:
        name: monotonic
        virtualenv: "{{ python_venv }}"

    - name: Add Zero Networks user to sudoers
      lineinfile:
        dest: /etc/sudoers
        state: present
        regexp: "^{{ zn_user }} "
        line: "{{ zn_user }} ALL=(ALL) NOPASSWD: ALL"

    - name: Set public key to allow SSH
      authorized_key:
        user: "{{ zn_user }}"
        state: present
        key: "{{ public_key }}"

    - name: Allow Zero Networks user to login
      user:
        name: "{{ zn_user }}"
        password_lock: no
        state: present
